# This is a basic workflow to help you get started with Actions

name: Backup

# Controls when the workflow will run
on:
  schedule:
    - cron: '5 */3 * * *'
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      routine:
        description: 'Routine'
        required: true
        type: choice
        options: ['backup', 'restore', 'obfuscate', 'restore data']
        default: 'bakcup'
      obfuscate:
        description: 'Obfuscate database after backup'
        required: false
        type: boolean

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  backup-db:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || inputs.routine == 'backup' }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo backup
  
  obfuscate-db:
    name: Obfuscate
    needs: backup-db
    runs-on: ubuntu-latest
    if: |
      always() && (
        (
          contains(needs.backup-db.result, 'success') 
          && ((inputs.routine == 'backup' && inputs.obfuscate == true) || github.event_name == 'schedule')
        ) 
        || inputs.routine == 'obfuscate'
      )
    steps:
      - run: echo Obfuscate


  restore:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: ${{ inputs.routine == 'restore' }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo restore

  restore-data:
    runs-on: ubuntu-latest
    if: always() && (
        contains(needs.restore.result, 'success') 
        || inputs.routine == 'restore data'
      )
    needs: restore
    steps:
      - name: 'Some step'
        run: echo restore-data
